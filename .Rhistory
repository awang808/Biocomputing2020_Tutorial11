# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 55 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = O #results of the second simulation of muscle oxygen content
Hrate = 55 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 109 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = O #results of the second simulation of muscle oxygen content
Hrate = 109 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 55 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = O #results of the second simulation of muscle oxygen content
Hrate = 55 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transfered from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
# first simulation model inputs
Hrate = 55 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 1 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Demand = Odemand*Alevel
O[i] = O[i-1]+Supply-Demand
}
# second simulation model inputs
O2 = O #results of the second simulation of muscle oxygen content
Hrate = 109 # 50-200; heart rate beats per minute  UPDATE YOUR HEARTRATE HERE
Alevel = 2.5 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Supply = Oblood*Hrate*f*b*(1-O2[i-1]/Omax)
Demand = Odemand*Alevel
O2[i] = O2[i-1]+Supply-Demand
}
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10)) # first simulation results, line colored black
lines(O2, col='red') # second simulation results, line colored red
abline(h=1.2, lty=3) # draw a horizontal line at 1.2 = 1/(273*8.3e3)*1000*100*32; this assumes 100 ml skeletal muscle
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
b<-c(1,2,3,NA,5)
b
mean(b)
mean(b,na.rm)
mean(b,na.rm=TRUE)
test <- data.frame(numbers=c(20,13,10,5,6,7))
View(test)
for (i in (test)){
if (sum(test) == 100){
print("The file is correct, A+!")
} else if (sum(test) < 100){
print("Sorry, you have failed")
} else {sum(test) > 100
print("Sorry, you failed")
}
}
test1 <- data.frame(numbers=c(20,13,10,5,6,7)) # less than 100
View(test1)
file="test1.csv"
checkAssignments <- function(file){
assignment=read.csv(file)
total=sum(assignment$numbers)
test1 <- data.frame(numbers=c(20,13,10,5,6,7)) # less than 100
test2 <- data.frame(numbers=c(50,20,40,55,15)) # more than 100
write.csv(x=test1,file="test1.csv")
write.csv(x=test2,file="test2.csv")
# define function to check files
# read in the file
# get sums in each file
file="test1.csv"
checkAssignments <- function(file){
assignment=read.csv(file)
total=sum(assignment$numbers)
if (total < 100){
cat("You get an A+!")
}else{
cat("You failed")
}
}
checkAssignments(file="test1.csv")
checkAssignments(file="test2.csv")
for (i in (test)){
if (sum(x) < 100){
print("This is correct, A+!")
} else if (sum(x) == 100){
print("Sorry, you have failed")
} else {sum(x) > 100
print("Sorry, you failed")
}
}
test1 <- data.frame(numbers=c(20,13,10,5,6,7)) # less than 100
test2 <- data.frame(numbers=c(50,20,40,55,15)) # more than 100
write.csv(x=test1,file="test1.csv")
write.csv(x=test2,file="test2.csv")
# define function to check files
# read in the file
# get sums in each file
file="test1.csv"
checkAssignments <- function(file){
assignment=read.csv(file)
total=sum(assignment$numbers)
if (total < 100){
cat("You get an A+!")
}else{
cat("You failed")
}
}
checkAssignments(file="test1.csv")
checkAssignments(file="test2.csv")
?read.directory
?read.dir
?read
?read.csv
setwd ("/Users/ashlynwang/Biocomputing2020_Tutorial11")
x = dir
coVariation <- function(x){
average = mean(x)
stdDev = sd(x)
coefficientV = stdDev/average
return(coefficientV)
}
View(coVariation)
View(x)
View(coVariation)
coVariation(Biocomputing2020_Tutorial11)
coVariation(x)
?path.choose
?path
?count.fields
?scan
setwd ("/Users/ashlynwang/Biocomputing2020_Tutorial11")
# create a function that reads data from each file in specified directory
# calculate coefficient of variation
# return values as vector
# create function that has 50 observations
# report an error if any file has less than 50 observations
# allow user to override this behavior and only receive a warning if 50 observations are not present
# if a file doesn’t have the correct number of columns or the provided data includes NA’s.
coVariation <- function(x){
input<-list.files(path=choose.dir(x))
average = mean(input)
stdDev = sd(input)
coefficientV = stdDev/average
observations <- scan(input)
if(observations<50){
print("Warning: this file has observations less than 50.")
usermsg <- readline(prompt = "Override? Y or N")
}while (usermsg != Y){
print("End")
}else{
return(coefficientV)
}
}
